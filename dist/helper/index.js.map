{"version":3,"sources":["../../src/helper/index.js"],"names":["compareArrays","array1","array2","length","sort","every","value","index","isCorrectKeys","Object","keys","obj","allowedUnits","periodMatches","YEAR_UNIT","MONTH_UNIT","DAY_UNIT","timeMatches","HOUR_UNIT","MINUTE_UNIT","SECOND_UNIT","getPart","initialObject","units","matches","result","forEach","inputValue","unit","resultString","getPeriod","emptyPeriod","periodUnits","getTime","emptyTime","timeUnits","isValidObject","TypeError","objectToDuration","negative","IS_NEGATIVE_UNIT","periodStr","timeStr"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA,MAAMA,gBAAgB,SAAhBA,aAAgB,CAACC,MAAD,EAASC,MAAT;AAAA,WACpBD,OAAOE,MAAP,KAAkBD,OAAOC,MAAzB,IACAF,OAAOG,IAAP,GAAcC,KAAd,CAAoB,UAACC,KAAD,EAAQC,KAAR;AAAA,aAAkBD,UAAUJ,OAAOE,IAAP,GAAcG,KAAd,CAA5B;AAAA,KAApB,CAFoB;AAAA,GAAtB;;AAIA,MAAMC,gBAAgB,SAAhBA,aAAgB;AAAA,WAAOR,cAAcS,OAAOC,IAAP,CAAYC,GAAZ,CAAd,EAAgCC,mBAAhC,CAAP;AAAA,GAAtB;;AAEA,MAAMC,qDACHC,gBADG,IACS,GADT,iBAEHC,iBAFG,IAEU,GAFV,iBAGHC,eAHG,IAGQ,GAHR,iBAAN;;AAMA,MAAMC,+CACHC,gBADG,IACS,GADT,eAEHC,kBAFG,IAEW,GAFX,eAGHC,kBAHG,IAGW,GAHX,eAAN;;AAMA,MAAMC,UAAU,SAAVA,OAAU,CAACV,GAAD,EAAMW,aAAN,EAAqBC,KAArB,EAA4BC,OAA5B,EAAwC;AACtD,QAAMC,SAASH,aAAf;AACA;;;AAGAC,UAAMG,OAAN,CAAc,gBAAQ;AACpB,UAAMC,aAAahB,IAAIiB,IAAJ,CAAnB;AACAH,aAAOG,IAAP,IAAe,OAAOD,UAAP,KAAsB,QAAtB,GAAiCA,UAAjC,GAA8C,CAA7D;AACD,KAHD;AAIA,QAAIE,eAAe,EAAnB;AACAN,UAAMG,OAAN,CAAc,gBAAQ;AACpB,UAAMC,aAAaF,OAAOG,IAAP,CAAnB;AACAC,sBAAgBF,aAAaH,QAAQI,IAAR,CAA7B;AACD,KAHD;AAIA,WAAOC,YAAP;AACD,GAfD;;AAiBA,MAAMC,YAAY,SAAZA,SAAY;AAAA,WAAOT,QAAQV,GAAR,EAAaoB,kBAAb,EAA0BC,kBAA1B,EAAuCnB,aAAvC,CAAP;AAAA,GAAlB;;AAEA,MAAMoB,UAAU,SAAVA,OAAU;AAAA,WAAOZ,QAAQV,GAAR,EAAauB,gBAAb,EAAwBC,gBAAxB,EAAmClB,WAAnC,CAAP;AAAA,GAAhB;;AAEA,MAAMmB,gBAAgB,SAAhBA,aAAgB,MAAO;AAC3B,QAAI,QAAOzB,GAAP,yCAAOA,GAAP,OAAe,QAAnB,EAA6B;AAC3B,YAAM,IAAI0B,SAAJ,CAAc,+BAAd,CAAN;AACD;AACD,WAAO7B,cAAcG,GAAd,CAAP;AACD,GALD;;AAOO,MAAM2B,8CAAmB,SAAnBA,gBAAmB,MAAO;AACrC,QAAI,CAACF,cAAczB,GAAd,CAAL,EAAyB,OAAO,IAAP;AACzB,QAAM4B,WAAW5B,IAAI6B,uBAAJ,IAAwB,GAAxB,GAA8B,EAA/C;AACA,QAAMC,YAAY,MAAMX,UAAUnB,GAAV,CAAxB;AACA,QAAM+B,UAAU,MAAMT,QAAQtB,GAAR,CAAtB;AACA,QAAMc,SAASc,WAAWE,SAAX,GAAuBC,OAAtC;AACA,QAAI,CAAC,+BAAmBjB,MAAnB,CAAL,EAAiC,OAAO,IAAP;AACjC,WAAOA,MAAP;AACD,GARM","file":"index.js","sourcesContent":["import {\n  allowedUnits,\n  periodUnits,\n  timeUnits,\n  emptyPeriod,\n  emptyTime,\n  YEAR_UNIT,\n  MONTH_UNIT,\n  DAY_UNIT,\n  HOUR_UNIT,\n  MINUTE_UNIT,\n  SECOND_UNIT,\n  IS_NEGATIVE_UNIT,\n  isValidXsdDuration\n} from '../index'\n\nconst compareArrays = (array1, array2) =>\n  array1.length === array2.length &&\n  array1.sort().every((value, index) => value === array2.sort()[index])\n\nconst isCorrectKeys = obj => compareArrays(Object.keys(obj), allowedUnits)\n\nconst periodMatches = {\n  [YEAR_UNIT]: 'Y',\n  [MONTH_UNIT]: 'M',\n  [DAY_UNIT]: 'D'\n}\n\nconst timeMatches = {\n  [HOUR_UNIT]: 'H',\n  [MINUTE_UNIT]: 'M',\n  [SECOND_UNIT]: 'S'\n}\n\nconst getPart = (obj, initialObject, units, matches) => {\n  const result = initialObject\n  /**\n   * All values must be number type\n   */\n  units.forEach(unit => {\n    const inputValue = obj[unit]\n    result[unit] = typeof inputValue === 'number' ? inputValue : 0\n  })\n  let resultString = ''\n  units.forEach(unit => {\n    const inputValue = result[unit]\n    resultString += inputValue + matches[unit]\n  })\n  return resultString\n}\n\nconst getPeriod = obj => getPart(obj, emptyPeriod, periodUnits, periodMatches)\n\nconst getTime = obj => getPart(obj, emptyTime, timeUnits, timeMatches)\n\nconst isValidObject = obj => {\n  if (typeof obj !== 'object') {\n    throw new TypeError('expected input to be a object')\n  }\n  return isCorrectKeys(obj)\n}\n\nexport const objectToDuration = obj => {\n  if (!isValidObject(obj)) return null\n  const negative = obj[IS_NEGATIVE_UNIT] ? '-' : ''\n  const periodStr = 'P' + getPeriod(obj)\n  const timeStr = 'T' + getTime(obj)\n  const result = negative + periodStr + timeStr\n  if (!isValidXsdDuration(result)) return null\n  return result\n}\n"]}